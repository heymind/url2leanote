// Generated by CoffeeScript 1.10.0
(function() {
  var HOST, PORT, app, koa, leaApiGetter, leaLogin, readabilityFetchContent, route, toMarkdown;

  koa = require('koa');

  route = require('koa-route');

  toMarkdown = require('to-markdown');

  readabilityFetchContent = require('./utils').readabilityFetchContent;

  leaApiGetter = require('./lea-api');

  leaLogin = leaApiGetter.login;

  HOST = process.env.HOST || '0.0.0.0';

  PORT = process.env.PORT || '8080';

  app = koa();

  app.use(route.get('/favour', function*() {
    var api, content, email, err, error, error1, error2, notebook, notebookId, notebookMatched, notebooks, pwd, ref, ref1, result, title, token, url;
    ref = this.query, token = ref.token, email = ref.email, pwd = ref.pwd, url = ref.url, notebook = ref.notebook, notebookId = ref.notebookId;
    try {
      if ((!token) && (email && pwd)) {
        token = (yield leaLogin(email, pwd));
      }
    } catch (error) {
      err = error;
      this["throw"](400, 'Login error.');
    }
    if (!token) {
      this["throw"](400, 'No token or login info provided.');
    }
    if (!url) {
      this["throw"](400, 'No url provided.');
    }
    if ((!notebook) && (!notebookId)) {
      this["throw"](400, 'No notebook info provided.');
    }
    api = leaApiGetter(token);
    if (!notebookId) {
      notebooks = (yield api.getNotebooks());
    }
    notebookMatched = notebooks.filter(function(v) {
      return v.name === notebook;
    });
    if (notebookMatched.length < 1) {
      this["throw"](400, 'No notebook matched.');
    }
    notebookId = notebookMatched[0].id;
    title = null;
    content = null;
    try {
      ref1 = (yield readabilityFetchContent(url)), title = ref1.title, content = ref1.content;
    } catch (error1) {
      err = error1;
      this["throw"](400, "Readability error." + (JSON.stringify(err)));
    }
    content = toMarkdown(content);
    result = null;
    try {
      result = (yield api.addNote(title, notebookId, content));
    } catch (error2) {
      err = error2;
      this["throw"](400, "Leanote Server error." + (JSON.stringify(err)));
    }
    if (result['Ok'] && result['Ok'] === false) {
      this["throw"](400, "Error " + (JSON.stringify(result)));
    }
    return this.body = result;
  }));

  app.listen(PORT);

  console.log("app listen on " + PORT);

}).call(this);

//# sourceMappingURL=app.js.map
